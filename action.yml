name: 'ðŸš€ semver create release'
description: 'Get the commits from the last commit'
inputs:
  configuration:
    description: 'flag for creating GH release'
    required: true
    default: ''
  create-gh-release:
    description: 'flag for creating GH release'
    required: true
    default: 'true'
  print-summary:
    description: 'flag for printing the release details to the GITHUB_STEP_SUMMARY'
    required: true
    default: 'true'

outputs:
  version:
    value: ${{ steps.semver.outputs.version }}
    description: 'repository version'
  release-title:
    value: ${{ steps.semver.outputs.release-title }}
    description: 'release title extracted from the squashed commit title'
  release-type:
    value: ${{ steps.semver.outputs.release-type }}
    description: 'release type as major, minor or patch'
  changes:
    value: ${{ steps.semver.outputs.changes }}
    description: 'changes merged: [{type,releaseAssociated,scopes,description,originalCommit}]'
  changelog-record:
    value: ${{ steps.semver.outputs.changelog-record }}
    description: 'changelog-record based on a template'
  scopes:
    value: ${{ steps.semver.outputs.scopes }}
    description: '{scopename:{version,changes,changelog-record}}'

runs:
  using: "composite"
  steps:
    - name: Validate Context and squashed commit received
      uses: actions/github-script@v7
      with:
        script: |
          if (context.eventName !== 'push') {
              throw new Error(`This GH action only supports push events.`)
          }
          const commits = context.payload.commits
          if (commits.length > 1) {
              throw new Error(`This GH action only expects one commit.`)
          }

    - name: Validate inputs
      if: ${{ inputs.configuration != '' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs        = require('fs')        
          const confPath  =  '${{ inputs.configuration }}'

          if (!fs.existsSync(confPath)) {
            core.setFailed(`configuration file not found: ${confPath}`)
          }

          const configContent = fs.readFileSync(confPath)
          const conf          = JSON.parse(configContent)

          core.startGroup('Configuration')
          console.log(conf)
          core.endGroup()

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        npm install

    - name: Semver
      uses: actions/github-script@v7
      id: semver
      env:
        USE_INPUT_CONFIG: ${{ inputs.configuration != '' }}
        INPUT_CONFIG: ${{ inputs.configuration }}
        DEFAULT_CONFIG: ${{ github.action_path }}/default-config.json
        CHANGELOG_RECORD_TEMPLATE: ${{ github.action_path }}/templates/changelog-record.md
      with:
        script: |
          const fs          = require('fs')        
          const { Index }   = require('${{ github.action_path }}/index.js')

          const confPath      = process.env.USE_INPUT_CONFIG === 'true' ? process.env.INPUT_CONFIG : process.env.DEFAULT_CONFIG
          const configContent = fs.readFileSync(confPath)
          const conf          = JSON.parse(configContent)

          Index(context, core, conf)

    - name: Commit changes
      if: ${{ steps.semver.outputs.release-title != '' }}
      id: commit
      shell: bash
      run: |
        # committing the changes in semver files
        git config user.name  "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        release_title="${{ steps.semver.outputs.release-title }}"
        commit_title="[skip ci] created release ${{ steps.semver.outputs.version}} - $release_title"
        changelog_record="${{ steps.semver.outputs.changelog-record }}"
        tag_version="${{ steps.semver.outputs.version}}"

        git add . 
        git commit -m "$commit_title" -m "$changelog_record"
        git tag -a $tag_version -m "$release_title" -m "$changelog_record"
        git push --follow-tags

        last_commit_id=$(git rev-parse HEAD)

        echo "last_commit_id=$last_commit_id"
        echo "last_commit_id=$last_commit_id" >> $GITHUB_OUTPUT

    - name: Create new Repo Release
      uses: actions/github-script@v7
      if: ${{ inputs.create-gh-release == 'true' && steps.semver.outputs.release-title != '' }}
      env:
        RELEASE_CHANGELOG: ${{ steps.semver.outputs.changelog-record}}
      with:
        script: |
          await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `${{ steps.semver.outputs.version}}`,
            target_commitish: '${{ steps.commit.outputs.last_commit_id }}',
            name: `${{ steps.semver.outputs.version}}-${{ steps.semver.outputs.release-title}}`,
            body: process.env.RELEASE_CHANGELOG,
          })

    - name: print summary
      if: ${{ inputs.print-summary == 'true' }}
      shell: bash
      run: |
        echo "printing summary"
        echo "# New release"                                                >> $GITHUB_STEP_SUMMARY
        echo "version released: ${{ steps.semver.outputs.version }}"        >> $GITHUB_STEP_SUMMARY
        echo "release title:    ${{ steps.semver.outputs.release-title }}"  >> $GITHUB_STEP_SUMMARY
        echo "release type:     ${{ steps.semver.outputs.release-type }}"   >> $GITHUB_STEP_SUMMARY
