name: 'ðŸš€ semver create release'
description: 'Get the commits from the last commit'
inputs:
  configuration:
    description: 'path to the configuration.yml'
    required: false
    default: ''
  create-gh-release:
    description: 'flag for creating a GH release for the whole repository'
    required: true
    default: 'false'
  print-summary:
    description: 'flag for printing whole repository release details'
    required: true
    default: 'false'
  print-annotations:
    description: 'flag for printing release details as annotations in the GH workflow'
    required: false
    default: 'false'
  github-token:
    description: 'GitHub token for creating release'
    required: false
  gh-user-name:
    description: 'GH user name for the semver commit'
    required: false
    default: 'github-actions-semver[bot]'
  gh-user-email:
    description: 'GH user email for the semver commit'
    required: false
    default: 'github-actions-semver[bot]@users.noreply.github.com'

outputs:
  new-version-released:
    value: ${{ steps.semver.outputs.release-required }}
    description: 'flag for creating GH release'
  version:
    value: ${{ steps.semver.outputs.version }}
    description: 'repository version'
  release-title:
    value: ${{ steps.parse-changes.outputs.release-title }}
    description: 'release title extracted from the squashed commit title'
  release-type:
    value: ${{ steps.semver.outputs.release-type }}
    description: 'release type as major, minor or patch'
  release-url:
    value: ${{ steps.create-repo-release.outputs.gh-release-url }}
    description: 'GH release url. Only available if create-gh-release is true'
  commit-id:
    value: ${{ steps.commit.outputs.last_commit_id }}
    description: 'Commit ID that includes the version.json and changelog updated'
  changes:
    value: ${{ steps.parse-changes.outputs.changes }}
    description: 'changes parsed: [{type,releaseAssociated,scopes,description,originalCommit}]'
  changelog-record:
    value: ${{ steps.semver.outputs.changelog-record }}
    description: 'changelog-record in markdown content'
  scopes:
    value: ${{ steps.semver.outputs.scopes }}
    description: 'Only available if scopes configuration provided. Format: {scopename:{version,changes,changelog-record}}'

runs:
  using: "composite"
  steps:
    - name: Validate Context and squashed commit received
      uses: actions/github-script@v7
      with:
        script: |
          if (context.eventName !== 'push') {
              throw new Error(`This GH action only supports push events.`)
          }
          const commits = context.payload.commits
          if (commits.length > 1) {
              throw new Error(`This GH action only expects one commit.`)
          }

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        npm install --omit=dev

    - name: Process configuration
      uses: actions/github-script@v7
      id: config
      env:
        INPUT_CONFIG: ${{ inputs.configuration }}
        NODE_MODULES_PATH: ${{ github.action_path }}/node_modules
        SCHEMA: ${{ github.action_path }}/config.schema.yml
      with:
        script: |
          const yml = require(`${process.env.NODE_MODULES_PATH}/js-yaml`)
          const Ajv = require(`${process.env.NODE_MODULES_PATH}/ajv`)
          const fs  = require('fs')

          const schemaPath    = process.env.SCHEMA
          const inputConfig   = process.env.INPUT_CONFIG
          const schemaContent = fs.readFileSync(schemaPath)
          const schema        = yml.load(schemaContent)
          let   config        = {}

          if(inputConfig !== '') {
            const configPath    = inputConfig
            const configContent = fs.readFileSync(configPath)
            config              = yml.load(configContent)
          }

          const ajv       = new Ajv({ useDefaults: true })  // add default values to the config properties
          const validate  = ajv.compile(schema)
          const valid     = validate(config)

          if (!valid) {
            const errorsJson = JSON.stringify(validate.errors, null, 2)
            core.setFailed(`configuration file is not valid: ${errorsJson}`)
          }

          core.startGroup('Configuration')
          console.log('config:', JSON.stringify(config, null, 2))
          core.endGroup()

          core.setOutput('config', config)

    - name: Parse Changes from last commit
      uses: actions/github-script@v7
      id: parse-changes
      env:
        CONFIG: ${{ steps.config.outputs.config }}
        NODE_MODULES_PATH: ${{ github.action_path }}/node_modules
      with:
        script: |
          core.startGroup('Parsing changes from last commit')

          const { parseChange }     = require('${{ github.action_path }}/functions/parse-change')
          const { parseLastCommit } = require('${{ github.action_path }}/functions/parse-last-commit')

          const conf          = JSON.parse(process.env.CONFIG)
          const commits       = context.payload.commits
          const commitMsg     = commits[0].message

          const { title, entries } = parseLastCommit(commitMsg)
          console.log(`title: ${title}`)
          console.log('entries:', JSON.stringify(entries, null, 2))

          console.log('changes:')
          const changes = entries
            .map(x => {
              const parsedChange = parseChange(x, conf.commits)
              console.log(JSON.stringify(parsedChange, null, 2))
              return parsedChange
            })
          core.endGroup()
          
          core.setOutput('changes', changes)
          core.setOutput('release-title', title)

    - name: Semver
      uses: actions/github-script@v7
      id: semver
      env:
        CONFIG: ${{ steps.config.outputs.config }}
        NODE_MODULES_PATH: ${{ github.action_path }}/node_modules
        CHANGELOG_RECORD_TEMPLATE: ${{ github.action_path }}/templates/changelog-record.md
        CHANGES: ${{ steps.parse-changes.outputs.changes }}
        RELEASE_TITLE: ${{ steps.parse-changes.outputs.release-title }}
      with:
        script: |
          const { Index }     = require('${{ github.action_path }}/index.js')

          const conf          = JSON.parse(process.env.CONFIG)
          const changes       = JSON.parse(process.env.CHANGES)
          const title         = process.env.RELEASE_TITLE

          const releaseDetails = Index(changes, title, conf)

          if(releaseDetails.releaseRequired){
            core.startGroup(`Next version is ${releaseDetails.version}. Details (click here):`)
            console.log(JSON.stringify(releaseDetails, null, 2))
            core.endGroup()
          }else{
            core.startGroup(`Commit merged did not trigger a new release. Commit details (click here):`)
            const commitMerged = context.payload.commits[0]
            console.log(JSON.stringify(commitMerged, null, 2))
            core.endGroup()
          }

          core.setOutput('version',           releaseDetails.version)
          core.setOutput('release-type',      releaseDetails.releaseType)
          core.setOutput('release-required',  releaseDetails.releaseRequired)
          core.setOutput('changelog-record',  releaseDetails.changelogRecord)
          core.setOutput('scopes',            releaseDetails.scopes)

    - name: Build release commit
      if: ${{ steps.semver.outputs.release-required == 'true' }}
      id: build-commit
      uses: actions/github-script@v7
      env:
        CONFIG: ${{ steps.config.outputs.config }}
        RELEASE_TITLE: ${{ steps.parse-changes.outputs.release-title }}
        CHANGELOG_RECORD: ${{ steps.semver.outputs.changelog-record }}
        REPO_TAG_VERSION: ${{ steps.semver.outputs.version }}
        SCOPES: ${{ steps.semver.outputs.scopes }}
      with:
        script: |
          const conf                    = JSON.parse(process.env.CONFIG)
          const supportedScopesConfig   = conf.scopes.list
          const releaseTitle            = process.env.RELEASE_TITLE
          const changelogRecord         = process.env.CHANGELOG_RECORD
          const repoTagVersion          = process.env.REPO_TAG_VERSION
          const scopes                  = JSON.parse(process.env.SCOPES)
          const tags                    = []

          const releaseCommit = {
            title: `[skip ci] created release ${repoTagVersion} - ${releaseTitle}`,
            body: changelogRecord
          }

          const repoVersionTag = {
            name: repoTagVersion,
            title: releaseTitle,
            body: changelogRecord
          }
          tags.push(repoVersionTag)

          const scopesTags = Object
            .entries(scopes)
            .map(([scope, properties]) => {
              const scopeConfig = supportedScopesConfig.find(x => x.key === scope)
              const createTag   = scopeConfig.versioning.createTags ?? conf.scopes.createTags
              return createTag ? {
                name: properties.tag,
                title: releaseTitle,
                body: properties.changelogRecord
              } : {}
            })
          tags.push(...scopesTags)

          core.setOutput('release-commit', releaseCommit)
          core.setOutput('tags', tags)

    - name: Commit changes
      if: ${{ steps.semver.outputs.release-required == 'true' }}
      id: commit
      shell: bash
      env:
        COMMIT: ${{ steps.build-commit.outputs.release-commit }}
        TAGS: ${{ steps.build-commit.outputs.tags }}
      run: |
        # committing the changes in semver files
        git config user.name  "${{ inputs.gh-user-name }}"
        git config user.email "${{ inputs.gh-user-email }}"
        
        commit_title=$(echo $COMMIT | jq -r '.title')
        commit_body=$(echo $COMMIT  | jq -r '.body')

        git add . 
        git commit -m "$commit_title" -m "$commit_body"
        
        echo $TAGS | jq -c '.[]' | while read -r tag; do
          _tag=$(echo $tag | jq -r '.name')
          _tag_title=$(echo $tag | jq -r '.title')
          _tag_body=$(echo $tag | jq -r '.body')
          git tag -a "$_tag" -m "$_tag_title" -m "$_tag_body"
        done
        
        git push --follow-tags

        last_commit_id=$(git rev-parse HEAD)

        echo "last_commit_id=$last_commit_id"
        echo "last_commit_id=$last_commit_id" >> $GITHUB_OUTPUT

    - name: Create GH Release for the whole repository
      if: ${{ inputs.create-gh-release == 'true' &&  steps.semver.outputs.release-required == 'true' }}
      uses: actions/github-script@v7
      id: create-repo-release
      env:
        RELEASE_CHANGELOG: ${{ steps.semver.outputs.changelog-record }}
      with:
        github-token: ${{ inputs.github-token || github.token }}
        script: |
          const response = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `${{ steps.semver.outputs.version}}`,
            target_commitish: '${{ steps.commit.outputs.last_commit_id }}',
            name: `${{ steps.semver.outputs.version}} ${{ steps.parse-changes.outputs.release-title}}`,
            body: process.env.RELEASE_CHANGELOG,
          })

          const releaseUrl = response.data.html_url
          core.setOutput('gh-release-url', releaseUrl)

    - name: printing summary for Repo Release
      if: ${{ inputs.print-summary == 'true' }}
      uses: actions/github-script@v7
      env:
        NEW_VERSION_RELEASED: ${{ steps.semver.outputs.release-required }}
        RELEASE_VERSION: ${{ steps.semver.outputs.version }}
        RELEASE_TITLE: ${{ steps.parse-changes.outputs.release-title }}
        RELEASE_TYPE: ${{ steps.semver.outputs.release-type }}
        RELEASE_COMMIT_ID: ${{ steps.commit.outputs.last_commit_id }}
        GH_RELEASE_CREATED: ${{ inputs.create-gh-release }}
        GH_RELEASE_URL: ${{ steps.create-repo-release.outputs.gh-release-url }}

      with:
        script: |
          const newVersionRelease = process.env.NEW_VERSION_RELEASED === 'true'

          if(newVersionRelease) {
            const releaseVersion    = process.env.RELEASE_VERSION
            const releaseTitle      = process.env.RELEASE_TITLE
            const releaseType       = process.env.RELEASE_TYPE  
            const releaseCommitId   = process.env.RELEASE_COMMIT_ID
            const ghReleaseCreated  = process.env.GH_RELEASE_CREATED === 'true'
            const linkToCommit      = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${releaseCommitId}`

            const tableHeader = [{data: 'version', header: true}, {data: 'title', header: true}, {data: 'type', header: true}]
            const tableRow    = [releaseVersion, releaseTitle, releaseType]

            if(ghReleaseCreated) {
              tableHeader.push({data: 'GH Release', header: true})
              const ghReleaseUrl        = `<a href="${process.env.GH_RELEASE_URL}">link</a>`
              tableRow.push(ghReleaseUrl)
            }

            const table = [tableHeader, tableRow]

            core.summary
              .addHeading('ðŸš€ New release')
              .addTable(table)
              .addHeading('commit id:', 3)
              .addLink(releaseCommitId, linkToCommit)
              .write()
          }else{
            core.summary
              .addRaw('changes did not triggered a new release')
              .write()
          }

    - name: Create GH releases for scopes
      if: ${{ steps.semver.outputs.scopes != '{}' }}
      uses: actions/github-script@v7
      id: create-scopes-releases
      env:
        CONFIG: ${{ steps.config.outputs.config }}
        SCOPES: ${{ steps.semver.outputs.scopes }}
      with:
        github-token: ${{ inputs.github-token || github.token }}
        script: |
          const conf                        = JSON.parse(process.env.CONFIG)
          const scopes                      = JSON.parse(process.env.SCOPES)
          const supportedScopesConfig       = conf.scopes.list
          const ghReleasesUrls              = {}

          for (const [scope, properties] of Object.entries(scopes)) {
            const scopeConfig   = supportedScopesConfig.find(x => x.key === scope)
            const createRelease = scopeConfig.versioning.createGHRelease ?? conf.scopes.createGHRelease
            if(createRelease) {
              const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: properties.tag,
                target_commitish: '${{ steps.commit.outputs.last_commit_id }}',
                name: `${properties.tag} ${{ steps.parse-changes.outputs.release-title }}`,
                body: properties.changelogRecord,
              })
              ghReleasesUrls[scope] = response.data.html_url
            }
          }
          
          if(ghReleasesUrls.length > 0) {
            core.startGroup('GH Releases per scope')
            console.log(JSON.stringify(ghReleasesUrls, null, 2))
            core.endGroup()
          }
          
          core.setOutput('gh-releases-urls', ghReleasesUrls)

    - name: printing summary for Scopes Releases
      if: ${{ steps.semver.outputs.scopes != '{}' && fromJSON(steps.config.outputs.config).scopes.printSummary }}
      uses: actions/github-script@v7
      env:
        SCOPES: ${{ steps.semver.outputs.scopes }}
        GH_RELEASES_URLS: ${{ steps.create-scopes-releases.outputs.gh-releases-urls }}
      with:
        script: |
          const scopes            = JSON.parse(process.env.SCOPES)
          const ghReleasesUrls    = JSON.parse(process.env.GH_RELEASES_URLS)
          const ghReleasesCreated = Object.keys(ghReleasesUrls).length > 0

          const tableHeaders = [
            {data: 'scope',   header: true}, 
            {data: 'version', header: true}, 
            {data: 'tag',     header: true}, 
            {data: 'type',    header: true}
          ]
          if(ghReleasesCreated) { 
            tableHeaders.push({data: 'GH Release', header: true})
          }
          const tableRows    = []
          
          Object
            .entries(scopes)
            .forEach(([scope, properties]) => {
              const releaseVersion  = properties.version
              const tag             = properties.tag
              const releaseType     = properties.releaseType  
              const row             = [scope, releaseVersion, tag, releaseType]
              if(ghReleasesCreated) {
                const ghReleaseLink   = ghReleasesUrls[scope] ? `<a href="${ghReleasesUrls[scope]}">link</a>` : 'not created'
                row.push(ghReleaseLink)
              }
              tableRows.push(row)
          })

          const table = [tableHeaders, ...tableRows]

          core.summary
            .addHeading('ðŸš€ Releases per scope')
            .addTable(table)
            .write()

    - name: Write Check Annotations
      uses: actions/github-script@v7
      if: ${{ inputs.print-annotations == 'true' }}
      env:
        NEW_VERSION_RELEASED: ${{ steps.semver.outputs.release-required }}
        RELEASE_VERSION: ${{ steps.semver.outputs.version }}
        RELEASE_TITLE: ${{ steps.parse-changes.outputs.release-title }}
      with:
        script: |
          const newVersionRelease = process.env.NEW_VERSION_RELEASED === 'true'

          if(newVersionRelease) {
            const releaseVersion    = process.env.RELEASE_VERSION
            const releaseTitle      = process.env.RELEASE_TITLE

            core.notice(`Version ${releaseVersion} released!`, {title: 'cangulo-actions/semver result'})
          }else{
            core.notice('Changes did not triggered a new release', {title: 'cangulo-actions/semver result'})
          }

# refresh_GH_action_version 20240112-4
