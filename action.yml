name: 'ðŸš€ semver create release'
description: 'Get the commits from the last commit'
inputs:
  configuration:
    description: 'flag for creating GH release'
    required: true
    default: ''
  create-gh-release:
    description: 'flag for creating GH release'
    required: true
    default: 'true'
  print-summary:
    description: 'flag for printing the release details to the GITHUB_STEP_SUMMARY'
    required: true
    default: 'true'

outputs:
  new-version-released:
    value: ${{ steps.semver.outputs.release-required }}
    description: 'flag for creating GH release'
  version:
    value: ${{ steps.semver.outputs.version }}
    description: 'repository version'
  release-title:
    value: ${{ steps.parse-changes.outputs.release-title }}
    description: 'release title extracted from the squashed commit title'
  release-type:
    value: ${{ steps.semver.outputs.release-type }}
    description: 'release type as major, minor or patch'
  release-url:
    value: ${{ steps.create-repo-release.outputs.release-url }}
    description: 'release url'
  commit-id:
    value: ${{ steps.commit.outputs.last_commit_id }}
    description: 'Commit ID that includes the version.json and changelog updated'
  changes:
    value: ${{ steps.parse-changes.outputs.changes }}
    description: 'changes merged: [{type,releaseAssociated,scopes,description,originalCommit}]'
  changelog-record:
    value: ${{ steps.semver.outputs.changelog-record }}
    description: 'changelog-record based on a template'
  scopes:
    value: ${{ steps.semver.outputs.scopes }}
    description: '{scopename:{version,changes,changelog-record}}'

runs:
  using: "composite"
  steps:
    - name: Validate Context and squashed commit received
      uses: actions/github-script@v7
      with:
        script: |
          if (context.eventName !== 'push') {
              throw new Error(`This GH action only supports push events.`)
          }
          const commits = context.payload.commits
          if (commits.length > 1) {
              throw new Error(`This GH action only expects one commit.`)
          }

    - name: Validate inputs
      if: ${{ inputs.configuration != '' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs        = require('fs')        
          const confPath  =  '${{ inputs.configuration }}'

          if (!fs.existsSync(confPath)) {
            core.setFailed(`configuration file not found: ${confPath}`)
          }

          const configContent = fs.readFileSync(confPath)
          const conf          = JSON.parse(configContent)

          core.startGroup('Configuration')
          console.log(JSON.stringify(conf, null, 2))
          core.endGroup()

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        npm install --omit=dev

    - name: Parse Changes from last commit
      uses: actions/github-script@v7
      id: parse-changes
      env:
        USE_INPUT_CONFIG: ${{ inputs.configuration != '' }}
        INPUT_CONFIG: ${{ inputs.configuration }}
        DEFAULT_CONFIG: ${{ github.action_path }}/default-config.json
      with:
        script: |
          const fs                  = require('fs')        
          const { parseChange }     = require('${{ github.action_path }}/functions/parse-change')
          const { parseLastCommit } = require('${{ github.action_path }}/functions/parse-last-commit')

          const confPath      = process.env.USE_INPUT_CONFIG === 'true' ? process.env.INPUT_CONFIG : process.env.DEFAULT_CONFIG
          const configContent = fs.readFileSync(confPath)
          const conf          = JSON.parse(configContent)
          const commits       = context.payload.commits
          const commitMsg     = commits[0].message

          core.startGroup('Last Commit message')
          const { title, entries } = parseLastCommit(commitMsg)
          console.log(`title: ${title}`)
          console.log('entries:', JSON.stringify(entries, null, 2))

          console.log('changes:')
          const changes = entries
            .map(x => {
              const parsedChange = parseChange(x, conf.changeTypes)
              console.log(JSON.stringify(parsedChange, null, 2))
              return parsedChange
            })
          core.endGroup()
          
          core.setOutput('changes', changes)
          core.setOutput('release-title', title)

    - name: Semver
      uses: actions/github-script@v7
      id: semver
      env:
        USE_INPUT_CONFIG: ${{ inputs.configuration != '' }}
        INPUT_CONFIG: ${{ inputs.configuration }}
        DEFAULT_CONFIG: ${{ github.action_path }}/default-config.json
        CHANGELOG_RECORD_TEMPLATE: ${{ github.action_path }}/templates/changelog-record.md
        CHANGES: ${{ steps.parse-changes.outputs.changes }}
        RELEASE_TITLE: ${{ steps.parse-changes.outputs.release-title }}
      with:
        script: |
          const fs                  = require('fs')        
          const { Index }           = require('${{ github.action_path }}/index.js')

          const confPath      = process.env.USE_INPUT_CONFIG === 'true' ? process.env.INPUT_CONFIG : process.env.DEFAULT_CONFIG
          const configContent = fs.readFileSync(confPath)
          const conf          = JSON.parse(configContent)
          const changes       = JSON.parse(process.env.CHANGES)
          const title         = process.env.RELEASE_TITLE

          const releaseDetails = Index(changes, title, conf)

          core.startGroup('new release info')
          console.log(JSON.stringify(releaseDetails, null, 2))
          core.endGroup()

          core.setOutput('version', releaseDetails.version)
          core.setOutput('release-type', releaseDetails.releaseType)
          core.setOutput('release-required', releaseDetails.releaseRequired)
          core.setOutput('changelog-record', releaseDetails.changelogRecord)
          core.setOutput('scopes', releaseDetails.scopes)

    - name: Commit changes
      if: ${{ steps.semver.outputs.release-required == 'true' }}
      id: commit
      shell: bash
      env:
        RELEASE_TITLE: ${{ steps.parse-changes.outputs.release-title }}
        CHANGELOG_RECORD: ${{ steps.semver.outputs.changelog-record }}
        REPO_TAG_VERSION: ${{ steps.semver.outputs.version }}
        SCOPES: ${{ steps.semver.outputs.scopes }}
      run: |
        # committing the changes in semver files
        git config user.name  "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        commit_title="[skip ci] created release $REPO_TAG_VERSION - $RELEASE_TITLE"

        git add . 
        git commit -m "$commit_title" -m "$CHANGELOG_RECORD"
        
        # tag repo version
        git tag -a $REPO_TAG_VERSION -m "$RELEASE_TITLE" -m "$CHANGELOG_RECORD"
        
        # tag scopes versions
        scopes=$(echo $SCOPES | jq -r 'keys[]')
        for scope in $scopes; do
          filter_version=".$scope.version"
          version=$(echo $SCOPES | jq -r $filter_version)          
          filter_changelog=".$scope.changelogRecord"
          changelog_record=$(echo $SCOPES | jq -r $filter_changelog)
          filter_tag=".$scope.tag"
          tag=$(echo $SCOPES | jq -r $filter_tag)
          git tag -a "$tag" -m "$RELEASE_TITLE" -m "$changelog_record"
        done

        git push --follow-tags

        last_commit_id=$(git rev-parse HEAD)

        echo "last_commit_id=$last_commit_id"
        echo "last_commit_id=$last_commit_id" >> $GITHUB_OUTPUT

    - name: Create GH Repo Release
      if: ${{ inputs.create-gh-release == 'true' &&  steps.semver.outputs.release-required == 'true' }}
      uses: actions/github-script@v7
      id: create-repo-release
      env:
        RELEASE_CHANGELOG: ${{ steps.semver.outputs.changelog-record}}
      with:
        script: |
          const response = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `${{ steps.semver.outputs.version}}`,
            target_commitish: '${{ steps.commit.outputs.last_commit_id }}',
            name: `${{ steps.semver.outputs.version}} ${{ steps.parse-changes.outputs.release-title}}`,
            body: process.env.RELEASE_CHANGELOG,
          })
          
          const releaseUrl = response.data.html_url
          core.setOutput('release-url', releaseUrl)

    - name: Create GH releases for scopes
      if: ${{ inputs.create-gh-release == 'true' &&  steps.semver.outputs.scopes != '{}' }}
      uses: actions/github-script@v7
      id: create-scopes-releases
      env:
        SCOPES: ${{ steps.semver.outputs.scopes }}
        RELEASE_CHANGELOG: ${{ steps.semver.outputs.changelog-record}}
      with:
        script: |
          const scopes = JSON.parse(process.env.SCOPES)
          const scopesWithUrl = {}

          for (const [scope, properties] of Object.entries(scopes)) {
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: properties.tag,
              target_commitish: '${{ steps.commit.outputs.last_commit_id }}',
              name: `${properties.tag} ${{ steps.parse-changes.outputs.release-title}}`,
              body: properties.changelogRecord,
            })
            scopesWithUrl[scope] = {
              ...properties,
              releaseUrl: response.data.html_url
            }
          }
          
          core.startGroup('scopes releases')
          console.log(JSON.stringify(scopesWithUrl, null, 2))
          core.endGroup()
          
          core.setOutput('scopes', scopesWithUrl)

    - name: printing summary for Repo Release
      if: ${{ inputs.print-summary == 'true' }}
      uses: actions/github-script@v7
      env:
        NEW_VERSION_RELEASED: ${{ steps.semver.outputs.release-required }}
        RELEASE_VERSION: ${{ steps.semver.outputs.version }}
        RELEASE_TITLE: ${{ steps.parse-changes.outputs.release-title }}
        RELEASE_TYPE: ${{ steps.semver.outputs.release-type }}
        RELEASE_URL: ${{ steps.create-repo-release.outputs.release-url }}
      with:
        script: |
          const newVersionRelease = process.env.NEW_VERSION_RELEASED === 'true'

          if(newVersionRelease) {
            const releaseVersion  = process.env.RELEASE_VERSION
            const releaseTitle    = process.env.RELEASE_TITLE
            const releaseType     = process.env.RELEASE_TYPE  
            const releaseUrl      = `<a href="${process.env.RELEASE_URL}">releaseUrl</a>`
            
            core.summary
              .addHeading('ðŸš€ New release')
              .addTable([
                [{data: 'version', header: true}, {data: 'title', header: true}, {data: 'type', header: true}, {data: 'link', header: true}],
                [releaseVersion, releaseTitle, releaseType, releaseUrl],
              ])
              .write()
          }else{
            core.summary
              .addRaw('changes did not triggered a new release')
              .write()
          }

    - name: printing summary for Scopes Releases
      if: ${{ inputs.print-summary == 'true' && steps.semver.outputs.scopes != '{}' }}
      uses: actions/github-script@v7
      env:
        SCOPES: ${{ steps.create-scopes-releases.outputs.scopes || '{}' }}
      with:
        script: |
          const scopes   = JSON.parse(process.env.SCOPES)

          const table = [
            [{data: 'version', header: true}, {data: 'tag', header: true}, {data: 'type', header: true}, {data: 'link', header: true}]
          ]
          
          Object.entries(scopes).forEach(([scope, properties]) => {
            const releaseVersion  = properties.version
            const tag             = properties.tag
            const releaseType     = properties.releaseType  
            const releaseUrl      = `<a href="${properties.releaseUrl}">releaseUrl</a>`
            table.push([releaseVersion, tag, releaseType, releaseUrl])
          })

          core.summary
            .addHeading('ðŸš€ Releases per scope')
            .addTable(table)
            .write()

# refresh_GH_action_version 20231202
