name: "ðŸš€ semver create release"
description: >
  Release versions following semver and conventional commits.
  Version is calculated in the last squashed commit message. 
  Support GH release creation and release notes.
  Support for multiple releases per commits scope.
inputs:
  configuration:
    description: "path to the configuration.yml which store the scopes and commit types"
    required: false
    default: ""
  create-gh-release:
    description: |
      flag for creating a GH release for the whole repository. 
      tag-version must be true.
      Make sure the workflow has permissions for creating a GH release
      or provide a GH token with permissions for doing it.
    required: true
    default: "false"
  github-token:
    description: "GitHub token for creating GH release"
    required: false
  include-previous-non-releasable-commits:
    description: 'flag for including non-release commits in the changelog. Those are commits with release type "none"'
    required: false
    default: "false"
  print-annotations:
    description: "flag for printing release details as annotations in the GH workflow"
    required: false
    default: "false"
  print-summary:
    description: "flag for printing whole repository release details"
    required: true
    default: "false"
  tag-version:
    description: "flag for tagging the repo version in the release commit"
    required: false
    default: "true"
  tag-prefix:
    description: |
      string to be added as prefix to the tag. 
      Only available if tag-version is true.
      Example: v -> tag: v1.0.0
    required: false
    default: ""
  gh-user-name:
    description: "GH user name for the semver commit"
    required: false
    default: "github-actions-semver[bot]"
  gh-user-email:
    description: "GH user email for the semver commit"
    required: false
    default: "github-actions-semver[bot]@users.noreply.github.com"

outputs:
  new-version-released:
    value: ${{ steps.semver.outputs.release-required }}
    description: "flag for detecting if a new version was released"
  version:
    value: ${{ steps.semver.outputs.version }}
    description: "repository version"
  release-title:
    value: ${{ steps.parse-changes.outputs.release-title }}
    description: "release title extracted from the squashed commit title"
  release-type:
    value: ${{ steps.semver.outputs.release-type }}
    description: "release type as major, minor or patch"
  release-url:
    value: ${{ steps.create-repo-release.outputs.gh-release-url }}
    description: "GH release url. Only available if create-gh-release is true"
  commit-id:
    value: ${{ steps.commit.outputs.last_commit_id }}
    description: "Commit ID that includes the version file and changelog updated"
  changes:
    value: ${{ steps.parse-changes.outputs.changes }}
    description: "changes parsed: [{type,releaseAssociated,scopes,description,originalCommit}]"
  changelog-record:
    value: ${{ steps.semver.outputs.changelog-record }}
    description: |
      changelog-record JSON object with title, body and content
      title   -> '# {version} {release title}'
      body    -> 'changes entries listed in grouped and listed by release type in markdown format'
      content -> title + body
  scopes:
    value: ${{ steps.semver.outputs.scopes }}
    description: "Only available if scopes configuration provided. Format: {scopename:{version,changes,changelog-record}}"

runs:
  using: "composite"
  steps:
    - name: Validate Context and squashed commit received
      uses: actions/github-script@v7
      with:
        script: |
          if (context.eventName !== 'push') {
              throw new Error(`This GH action only supports push events.`)
          }
          const commits = context.payload.commits
          if (commits.length > 1) {
              throw new Error(`This GH action only expects one commit.`)
          }

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        npm install --omit=dev

    - name: Process configuration
      uses: actions/github-script@v7
      env:
        INPUT_CONFIG: ${{ inputs.configuration }}
      id: get-config
      with:
        script: |
          const inputConfig = process.env.INPUT_CONFIG
          const GetConfig   = require('${{ github.action_path }}/github-scripts/get-config.js')
          GetConfig({core, inputConfig})

    - name: Getting changes from previous Commits
      uses: actions/github-script@v7
      if: ${{ inputs.include-previous-non-releasable-commits == 'true' }}
      id: get-previous-changes
      env:
        CONFIG: ${{ steps.get-config.outputs.config }}
      with:
        script: |
          const config             = JSON.parse(process.env.CONFIG)
          const GetPreviousChanges = require('${{ github.action_path }}/github-scripts/get-previous-changes.js')
          await GetPreviousChanges({core, github, context, config})

    - name: Parsing Changes from current commit
      uses: actions/github-script@v7
      id: parse-changes
      env:
        CONFIG: ${{ steps.get-config.outputs.config }}
        PREVIOUS_CHANGES: ${{ steps.get-previous-changes.outputs.previous-changes || '[]' }}
      with:
        script: |
          const ParseChanges = require('${{ github.action_path }}/github-scripts/parse-changes.js')
          ParseChanges({core, context})

    - name: Semver
      uses: actions/github-script@v7
      id: semver
      env:
        CONFIG: ${{ steps.get-config.outputs.config }}
        CHANGELOG_RECORD_TITLE_TEMPLATE: ${{ github.action_path }}/templates/changelog-record-title.md
        CHANGELOG_RECORD_BODY_TEMPLATE: ${{ github.action_path }}/templates/changelog-record-body.md
        CHANGES: ${{ steps.parse-changes.outputs.changes }}
        RELEASE_TITLE: ${{ steps.parse-changes.outputs.release-title }}
      with:
        script: |
          const config = JSON.parse(process.env.CONFIG)
          const Semver = require('${{ github.action_path }}/github-scripts/semver.js')
          Semver({core, context, config})

    - name: Build release commit
      if: ${{ steps.semver.outputs.release-required == 'true' }}
      id: build-commit-and-tags
      uses: actions/github-script@v7
      env:
        TAG_VERSION: ${{ inputs.tag-version }}
        TAG_PREFIX: ${{ inputs.tag-prefix }}
        CONFIG: ${{ steps.get-config.outputs.config }}
        RELEASE_TITLE: ${{ steps.parse-changes.outputs.release-title }}
        CHANGELOG_RECORD_BODY: ${{ fromJSON(steps.semver.outputs.changelog-record).body }}
        REPO_TAG_VERSION: ${{ steps.semver.outputs.version }}
        SCOPES: ${{ steps.semver.outputs.scopes }}
      with:
        script: |
          const BuildCommitAndTags = require('${{ github.action_path }}/github-scripts/build-commit-and-tags.js')
          BuildCommitAndTags({core})

    - name: Run pre-commit commands and plugins
      if: ${{ steps.semver.outputs.release-required == 'true' }}
      uses: actions/github-script@v7
      env:
        CONFIG: ${{ steps.get-config.outputs.config }}
        RELEASE_VERSION: ${{ steps.semver.outputs.version }}
      with:
        script: |
          // run pre-commit commands and plugins
          const config       = JSON.parse(process.env.CONFIG)
          const runPreCommit = require('${{ github.action_path }}/github-scripts/pre-commit.js')
          runPreCommit({core, exec, config })

    - name: Commit changes
      if: ${{ steps.semver.outputs.release-required == 'true' }}
      id: commit
      shell: bash
      env:
        COMMIT: ${{ steps.build-commit-and-tags.outputs.release-commit }}
        TAGS: ${{ steps.build-commit-and-tags.outputs.tags }}
      run: |
        # committing the changes in semver files
        git config user.name  "${{ inputs.gh-user-name }}"
        git config user.email "${{ inputs.gh-user-email }}"

        commit_title=$(echo $COMMIT | jq -r '.title')
        commit_body=$(echo $COMMIT  | jq -r '.body')

        git add . 
        git commit -m "$commit_title" -m "$commit_body"

        echo $TAGS | jq -c '.[]' | while read -r tag; do
          _tag=$(echo $tag | jq -r '.name')
          _tag_title=$(echo $tag | jq -r '.title')
          _tag_body=$(echo $tag | jq -r '.body')
          git tag -a "$_tag" -m "$_tag_title" -m "$_tag_body"
        done

        git push --follow-tags

        last_commit_id=$(git rev-parse HEAD)

        echo "last_commit_id=$last_commit_id"
        echo "last_commit_id=$last_commit_id" >> $GITHUB_OUTPUT

    - name: Create GH Release for the whole repository
      if: ${{ inputs.create-gh-release == 'true' &&  steps.semver.outputs.release-required == 'true' }}
      uses: actions/github-script@v7
      id: create-repo-release
      env:
        CHANGELOG_RECORD_BODY: ${{ fromJSON(steps.semver.outputs.changelog-record).body }}
      with:
        github-token: ${{ inputs.github-token || github.token }}
        script: |
          const response = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `${{ steps.semver.outputs.version}}`,
            target_commitish: '${{ steps.commit.outputs.last_commit_id }}',
            name: `${{ steps.semver.outputs.version}} ${{ steps.parse-changes.outputs.release-title}}`,
            body: process.env.CHANGELOG_RECORD_BODY,
          })

          const releaseUrl = response.data.html_url
          core.setOutput('gh-release-url', releaseUrl)

    - name: printing summary for Repo Release
      if: ${{ inputs.print-summary == 'true' }}
      uses: actions/github-script@v7
      env:
        NEW_VERSION_RELEASED: ${{ steps.semver.outputs.release-required }}
        RELEASE_VERSION: ${{ steps.semver.outputs.version }}
        RELEASE_TITLE: ${{ steps.parse-changes.outputs.release-title }}
        RELEASE_TYPE: ${{ steps.semver.outputs.release-type }}
        RELEASE_COMMIT_ID: ${{ steps.commit.outputs.last_commit_id }}
        GH_RELEASE_CREATED: ${{ inputs.create-gh-release }}
        GH_RELEASE_URL: ${{ steps.create-repo-release.outputs.gh-release-url }}
      with:
        script: |
          const newVersionRelease = process.env.NEW_VERSION_RELEASED === 'true'

          if(newVersionRelease) {
            const releaseVersion    = process.env.RELEASE_VERSION
            const releaseTitle      = process.env.RELEASE_TITLE
            const releaseType       = process.env.RELEASE_TYPE  
            const releaseCommitId   = process.env.RELEASE_COMMIT_ID
            const ghReleaseCreated  = process.env.GH_RELEASE_CREATED === 'true'
            const linkToCommit      = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${releaseCommitId}`

            const tableHeader = [{data: 'version', header: true}, {data: 'title', header: true}, {data: 'type', header: true}]
            const tableRow    = [releaseVersion, releaseTitle, releaseType]

            if(ghReleaseCreated) {
              tableHeader.push({data: 'GH Release', header: true})
              const ghReleaseUrl        = `<a href="${process.env.GH_RELEASE_URL}">link</a>`
              tableRow.push(ghReleaseUrl)
            }

            const table = [tableHeader, tableRow]

            core.summary
              .addHeading('ðŸš€ New release')
              .addTable(table)
              .addHeading('commit id:', 3)
              .addLink(releaseCommitId, linkToCommit)
              .write()
          }else{
            core.summary
              .addRaw('changes did not triggered a new release')
              .write()
          }

    - name: Create GH releases for scopes
      if: ${{ steps.semver.outputs.scopes != '{}' }}
      uses: actions/github-script@v7
      id: create-scopes-releases
      env:
        CONFIG: ${{ steps.get-config.outputs.config }}
        SCOPES: ${{ steps.semver.outputs.scopes }}
        SCOPE_TAGS: ${{ steps.build-commit-and-tags.outputs.tags-per-scope }}
      with:
        github-token: ${{ inputs.github-token || github.token }}
        script: |
          const conf                        = JSON.parse(process.env.CONFIG)
          const scopes                      = JSON.parse(process.env.SCOPES)
          const scopeTags                   = JSON.parse(process.env.SCOPE_TAGS)
          const supportedScopesConfig       = conf.scopes.list
          const ghReleasesUrls              = {}

          for (const [scope, properties] of Object.entries(scopes)) {
            const scopeConfig   = supportedScopesConfig.find(x => x.key === scope)
            const createRelease = scopeConfig.versioning['create-gh-release'] ?? conf.scopes['create-gh-release']
            const tagCreated    = scopeTags[scope] !== undefined
            if(createRelease && tagCreated) {
              const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: scopeTags[scope],
                target_commitish: '${{ steps.commit.outputs.last_commit_id }}',
                name: `${scopeTags[scope]} ${{ steps.parse-changes.outputs.release-title }}`,
                body: properties.changelogRecord.body,
              })
              ghReleasesUrls[scope] = response.data.html_url
            }
          }

          if(ghReleasesUrls.length > 0) {
            core.startGroup('GH Releases per scope')
            console.log(JSON.stringify(ghReleasesUrls, null, 2))
            core.endGroup()
          }

          core.setOutput('gh-releases-urls', ghReleasesUrls)

    - name: printing summary for Scopes Releases
      if: ${{ steps.semver.outputs.scopes != '{}' && fromJSON(steps.get-config.outputs.config).scopes['print-summary'] }}
      uses: actions/github-script@v7
      env:
        SCOPES: ${{ steps.semver.outputs.scopes }}
        GH_RELEASES_URLS: ${{ steps.create-scopes-releases.outputs.gh-releases-urls }}
        SCOPE_TAGS: ${{ steps.build-commit-and-tags.outputs.tags-per-scope }}
      with:
        script: |
          const scopes            = JSON.parse(process.env.SCOPES)
          const scopeTags         = JSON.parse(process.env.SCOPE_TAGS)
          const ghReleasesUrls    = JSON.parse(process.env.GH_RELEASES_URLS)
          const ghReleasesCreated = Object.keys(ghReleasesUrls).length > 0

          const tableHeaders = [
            {data: 'scope',   header: true}, 
            {data: 'version', header: true}, 
            {data: 'tag',     header: true}, 
            {data: 'type',    header: true}
          ]
          if(ghReleasesCreated) { 
            tableHeaders.push({data: 'GH Release', header: true})
          }
          const tableRows    = []

          Object
            .entries(scopes)
            .forEach(([scope, properties]) => {
              const releaseVersion  = properties.version
              const tag             = scopeTags[scope] ?? 'tag not created'
              const releaseType     = properties.releaseType  
              const row             = [scope, releaseVersion, tag, releaseType]
              if(ghReleasesCreated) {
                const ghReleaseLink   = ghReleasesUrls[scope] ? `<a href="${ghReleasesUrls[scope]}">link</a>` : 'not created'
                row.push(ghReleaseLink)
              }
              tableRows.push(row)
          })

          const table = [tableHeaders, ...tableRows]

          core.summary
            .addHeading('ðŸš€ Releases per scope')
            .addTable(table)
            .write()

    - name: Write Check Annotations
      uses: actions/github-script@v7
      if: ${{ inputs.print-annotations == 'true' }}
      env:
        NEW_VERSION_RELEASED: ${{ steps.semver.outputs.release-required }}
        RELEASE_VERSION: ${{ steps.semver.outputs.version }}
        RELEASE_TITLE: ${{ steps.parse-changes.outputs.release-title }}
      with:
        script: |
          const newVersionRelease = process.env.NEW_VERSION_RELEASED === 'true'

          if(newVersionRelease) {
            const releaseVersion    = process.env.RELEASE_VERSION
            const releaseTitle      = process.env.RELEASE_TITLE

            core.notice(`Version ${releaseVersion} released!`, {title: 'cangulo-actions/semver result'})
          }else{
            core.notice('Changes did not triggered a new release', {title: 'cangulo-actions/semver result'})
          }

# refresh_GH_action_version 20240127-1
