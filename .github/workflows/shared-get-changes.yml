name: shared-get-changes

on:
  workflow_call:
    outputs:
      js-modified:
        value: ${{ jobs.get-changes.outputs.js-modified }}
      action-modified:
        value: ${{ jobs.get-changes.outputs.action-modified }}
      e2e-tests:
        value: ${{ jobs.list-e2e-tests.outputs.tests }}

permissions: read-all

jobs:
  get-changes:
    name: ðŸ”Ž Get Changes
    runs-on: ubuntu-latest
    outputs:
      js-modified: ${{ steps.changes.outputs.js }}
      action-modified: ${{ steps.changes.outputs.action }}
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - name: Paths Changes Filter
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: changes
        with:
          filters: |
            js:
              - functions/**
              - plugins/**
              - package.json
              - package-lock.json
              - tests/index/**
              - tests/functions/**
            action:
              - action.yml
              - functions/**
              - plugins/**
              - cypress/**
              - package.json
              - package-lock.json

  list-e2e-tests:
    name: ðŸ“œ List E2E tests
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.e2e-files.outputs.tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - name: scan *.feature files
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: e2e-files
        with:
          script: |
            const fs        = require('fs')
            const patterns  = ['cypress/cypress/e2e/*.feature']
            const globber   = await glob.create(patterns.join('\n'))
            const files     = await globber.glob()

            // function to parse the *.feature file and return feature name from the line "Feature:{FEATURE_NAME}"
            const getFeatureName = (file) => {
              const content = fs.readFileSync(file, 'utf8')
              const feature = content.match(/Feature:(.*)/)[1].trim()
              return feature
            }

            const tests = files.map(file => ({
              scenario: getFeatureName(file),
              spec: file,
              key: file.split('/').pop().replace('.feature', '')
            }))

            console.log(tests)
            core.setOutput('tests', tests)
